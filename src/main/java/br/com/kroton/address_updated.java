/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package br.com.kroton;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class address_updated extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8372491889677094236L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"address_updated\",\"namespace\":\"br.com.kroton\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"addressType\",\"type\":\"string\"},{\"name\":\"defaultAddress\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"latestEndDate\",\"type\":[\"null\",{\"type\":\"long\",\"connect.version\":1,\"connect.name\":\"org.apache.kafka.connect.data.Timestamp\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"latestStartDate\",\"type\":[\"null\",{\"type\":\"long\",\"connect.version\":1,\"connect.name\":\"org.apache.kafka.connect.data.Timestamp\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"mailingCity\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"mailingCountry\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"mailingPostalCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"mailingState\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"mailingStreet\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"mailingStreet2\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"seasonAlendDay\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"seasonAlendMonth\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"seasonAlendYear\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"seasonalStartDay\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"seasonalStartMonth\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"seasonalStartYear\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"updatedAt\",\"type\":[{\"type\":\"long\",\"connect.version\":1,\"connect.name\":\"org.apache.kafka.connect.data.Timestamp\",\"logicalType\":\"timestamp-millis\"}]},{\"name\":\"userUpdated\",\"type\":\"string\"}],\"connect.name\":\"address_updated\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<address_updated> ENCODER =
      new BinaryMessageEncoder<address_updated>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<address_updated> DECODER =
      new BinaryMessageDecoder<address_updated>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<address_updated> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<address_updated> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<address_updated> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<address_updated>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this address_updated to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a address_updated from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a address_updated instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static address_updated fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence id;
   private java.lang.CharSequence addressType;
   private java.lang.Boolean defaultAddress;
   private java.time.Instant latestEndDate;
   private java.time.Instant latestStartDate;
   private java.lang.CharSequence mailingCity;
   private java.lang.CharSequence mailingCountry;
   private java.lang.CharSequence mailingPostalCode;
   private java.lang.CharSequence mailingState;
   private java.lang.CharSequence mailingStreet;
   private java.lang.CharSequence mailingStreet2;
   private java.lang.CharSequence seasonAlendDay;
   private java.lang.CharSequence seasonAlendMonth;
   private java.lang.CharSequence seasonAlendYear;
   private java.lang.CharSequence seasonalStartDay;
   private java.lang.CharSequence seasonalStartMonth;
   private java.lang.CharSequence seasonalStartYear;
   private java.lang.Object updatedAt;
   private java.lang.CharSequence userUpdated;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public address_updated() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param addressType The new value for addressType
   * @param defaultAddress The new value for defaultAddress
   * @param latestEndDate The new value for latestEndDate
   * @param latestStartDate The new value for latestStartDate
   * @param mailingCity The new value for mailingCity
   * @param mailingCountry The new value for mailingCountry
   * @param mailingPostalCode The new value for mailingPostalCode
   * @param mailingState The new value for mailingState
   * @param mailingStreet The new value for mailingStreet
   * @param mailingStreet2 The new value for mailingStreet2
   * @param seasonAlendDay The new value for seasonAlendDay
   * @param seasonAlendMonth The new value for seasonAlendMonth
   * @param seasonAlendYear The new value for seasonAlendYear
   * @param seasonalStartDay The new value for seasonalStartDay
   * @param seasonalStartMonth The new value for seasonalStartMonth
   * @param seasonalStartYear The new value for seasonalStartYear
   * @param updatedAt The new value for updatedAt
   * @param userUpdated The new value for userUpdated
   */
  public address_updated(java.lang.CharSequence id, java.lang.CharSequence addressType, java.lang.Boolean defaultAddress, java.time.Instant latestEndDate, java.time.Instant latestStartDate, java.lang.CharSequence mailingCity, java.lang.CharSequence mailingCountry, java.lang.CharSequence mailingPostalCode, java.lang.CharSequence mailingState, java.lang.CharSequence mailingStreet, java.lang.CharSequence mailingStreet2, java.lang.CharSequence seasonAlendDay, java.lang.CharSequence seasonAlendMonth, java.lang.CharSequence seasonAlendYear, java.lang.CharSequence seasonalStartDay, java.lang.CharSequence seasonalStartMonth, java.lang.CharSequence seasonalStartYear, java.lang.Object updatedAt, java.lang.CharSequence userUpdated) {
    this.id = id;
    this.addressType = addressType;
    this.defaultAddress = defaultAddress;
    this.latestEndDate = latestEndDate;
    this.latestStartDate = latestStartDate;
    this.mailingCity = mailingCity;
    this.mailingCountry = mailingCountry;
    this.mailingPostalCode = mailingPostalCode;
    this.mailingState = mailingState;
    this.mailingStreet = mailingStreet;
    this.mailingStreet2 = mailingStreet2;
    this.seasonAlendDay = seasonAlendDay;
    this.seasonAlendMonth = seasonAlendMonth;
    this.seasonAlendYear = seasonAlendYear;
    this.seasonalStartDay = seasonalStartDay;
    this.seasonalStartMonth = seasonalStartMonth;
    this.seasonalStartYear = seasonalStartYear;
    this.updatedAt = updatedAt;
    this.userUpdated = userUpdated;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return addressType;
    case 2: return defaultAddress;
    case 3: return latestEndDate;
    case 4: return latestStartDate;
    case 5: return mailingCity;
    case 6: return mailingCountry;
    case 7: return mailingPostalCode;
    case 8: return mailingState;
    case 9: return mailingStreet;
    case 10: return mailingStreet2;
    case 11: return seasonAlendDay;
    case 12: return seasonAlendMonth;
    case 13: return seasonAlendYear;
    case 14: return seasonalStartDay;
    case 15: return seasonalStartMonth;
    case 16: return seasonalStartYear;
    case 17: return updatedAt;
    case 18: return userUpdated;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: addressType = (java.lang.CharSequence)value$; break;
    case 2: defaultAddress = (java.lang.Boolean)value$; break;
    case 3: latestEndDate = (java.time.Instant)value$; break;
    case 4: latestStartDate = (java.time.Instant)value$; break;
    case 5: mailingCity = (java.lang.CharSequence)value$; break;
    case 6: mailingCountry = (java.lang.CharSequence)value$; break;
    case 7: mailingPostalCode = (java.lang.CharSequence)value$; break;
    case 8: mailingState = (java.lang.CharSequence)value$; break;
    case 9: mailingStreet = (java.lang.CharSequence)value$; break;
    case 10: mailingStreet2 = (java.lang.CharSequence)value$; break;
    case 11: seasonAlendDay = (java.lang.CharSequence)value$; break;
    case 12: seasonAlendMonth = (java.lang.CharSequence)value$; break;
    case 13: seasonAlendYear = (java.lang.CharSequence)value$; break;
    case 14: seasonalStartDay = (java.lang.CharSequence)value$; break;
    case 15: seasonalStartMonth = (java.lang.CharSequence)value$; break;
    case 16: seasonalStartYear = (java.lang.CharSequence)value$; break;
    case 17: updatedAt = value$; break;
    case 18: userUpdated = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'addressType' field.
   * @return The value of the 'addressType' field.
   */
  public java.lang.CharSequence getAddressType() {
    return addressType;
  }


  /**
   * Sets the value of the 'addressType' field.
   * @param value the value to set.
   */
  public void setAddressType(java.lang.CharSequence value) {
    this.addressType = value;
  }

  /**
   * Gets the value of the 'defaultAddress' field.
   * @return The value of the 'defaultAddress' field.
   */
  public java.lang.Boolean getDefaultAddress() {
    return defaultAddress;
  }


  /**
   * Sets the value of the 'defaultAddress' field.
   * @param value the value to set.
   */
  public void setDefaultAddress(java.lang.Boolean value) {
    this.defaultAddress = value;
  }

  /**
   * Gets the value of the 'latestEndDate' field.
   * @return The value of the 'latestEndDate' field.
   */
  public java.time.Instant getLatestEndDate() {
    return latestEndDate;
  }


  /**
   * Sets the value of the 'latestEndDate' field.
   * @param value the value to set.
   */
  public void setLatestEndDate(java.time.Instant value) {
    this.latestEndDate = value;
  }

  /**
   * Gets the value of the 'latestStartDate' field.
   * @return The value of the 'latestStartDate' field.
   */
  public java.time.Instant getLatestStartDate() {
    return latestStartDate;
  }


  /**
   * Sets the value of the 'latestStartDate' field.
   * @param value the value to set.
   */
  public void setLatestStartDate(java.time.Instant value) {
    this.latestStartDate = value;
  }

  /**
   * Gets the value of the 'mailingCity' field.
   * @return The value of the 'mailingCity' field.
   */
  public java.lang.CharSequence getMailingCity() {
    return mailingCity;
  }


  /**
   * Sets the value of the 'mailingCity' field.
   * @param value the value to set.
   */
  public void setMailingCity(java.lang.CharSequence value) {
    this.mailingCity = value;
  }

  /**
   * Gets the value of the 'mailingCountry' field.
   * @return The value of the 'mailingCountry' field.
   */
  public java.lang.CharSequence getMailingCountry() {
    return mailingCountry;
  }


  /**
   * Sets the value of the 'mailingCountry' field.
   * @param value the value to set.
   */
  public void setMailingCountry(java.lang.CharSequence value) {
    this.mailingCountry = value;
  }

  /**
   * Gets the value of the 'mailingPostalCode' field.
   * @return The value of the 'mailingPostalCode' field.
   */
  public java.lang.CharSequence getMailingPostalCode() {
    return mailingPostalCode;
  }


  /**
   * Sets the value of the 'mailingPostalCode' field.
   * @param value the value to set.
   */
  public void setMailingPostalCode(java.lang.CharSequence value) {
    this.mailingPostalCode = value;
  }

  /**
   * Gets the value of the 'mailingState' field.
   * @return The value of the 'mailingState' field.
   */
  public java.lang.CharSequence getMailingState() {
    return mailingState;
  }


  /**
   * Sets the value of the 'mailingState' field.
   * @param value the value to set.
   */
  public void setMailingState(java.lang.CharSequence value) {
    this.mailingState = value;
  }

  /**
   * Gets the value of the 'mailingStreet' field.
   * @return The value of the 'mailingStreet' field.
   */
  public java.lang.CharSequence getMailingStreet() {
    return mailingStreet;
  }


  /**
   * Sets the value of the 'mailingStreet' field.
   * @param value the value to set.
   */
  public void setMailingStreet(java.lang.CharSequence value) {
    this.mailingStreet = value;
  }

  /**
   * Gets the value of the 'mailingStreet2' field.
   * @return The value of the 'mailingStreet2' field.
   */
  public java.lang.CharSequence getMailingStreet2() {
    return mailingStreet2;
  }


  /**
   * Sets the value of the 'mailingStreet2' field.
   * @param value the value to set.
   */
  public void setMailingStreet2(java.lang.CharSequence value) {
    this.mailingStreet2 = value;
  }

  /**
   * Gets the value of the 'seasonAlendDay' field.
   * @return The value of the 'seasonAlendDay' field.
   */
  public java.lang.CharSequence getSeasonAlendDay() {
    return seasonAlendDay;
  }


  /**
   * Sets the value of the 'seasonAlendDay' field.
   * @param value the value to set.
   */
  public void setSeasonAlendDay(java.lang.CharSequence value) {
    this.seasonAlendDay = value;
  }

  /**
   * Gets the value of the 'seasonAlendMonth' field.
   * @return The value of the 'seasonAlendMonth' field.
   */
  public java.lang.CharSequence getSeasonAlendMonth() {
    return seasonAlendMonth;
  }


  /**
   * Sets the value of the 'seasonAlendMonth' field.
   * @param value the value to set.
   */
  public void setSeasonAlendMonth(java.lang.CharSequence value) {
    this.seasonAlendMonth = value;
  }

  /**
   * Gets the value of the 'seasonAlendYear' field.
   * @return The value of the 'seasonAlendYear' field.
   */
  public java.lang.CharSequence getSeasonAlendYear() {
    return seasonAlendYear;
  }


  /**
   * Sets the value of the 'seasonAlendYear' field.
   * @param value the value to set.
   */
  public void setSeasonAlendYear(java.lang.CharSequence value) {
    this.seasonAlendYear = value;
  }

  /**
   * Gets the value of the 'seasonalStartDay' field.
   * @return The value of the 'seasonalStartDay' field.
   */
  public java.lang.CharSequence getSeasonalStartDay() {
    return seasonalStartDay;
  }


  /**
   * Sets the value of the 'seasonalStartDay' field.
   * @param value the value to set.
   */
  public void setSeasonalStartDay(java.lang.CharSequence value) {
    this.seasonalStartDay = value;
  }

  /**
   * Gets the value of the 'seasonalStartMonth' field.
   * @return The value of the 'seasonalStartMonth' field.
   */
  public java.lang.CharSequence getSeasonalStartMonth() {
    return seasonalStartMonth;
  }


  /**
   * Sets the value of the 'seasonalStartMonth' field.
   * @param value the value to set.
   */
  public void setSeasonalStartMonth(java.lang.CharSequence value) {
    this.seasonalStartMonth = value;
  }

  /**
   * Gets the value of the 'seasonalStartYear' field.
   * @return The value of the 'seasonalStartYear' field.
   */
  public java.lang.CharSequence getSeasonalStartYear() {
    return seasonalStartYear;
  }


  /**
   * Sets the value of the 'seasonalStartYear' field.
   * @param value the value to set.
   */
  public void setSeasonalStartYear(java.lang.CharSequence value) {
    this.seasonalStartYear = value;
  }

  /**
   * Gets the value of the 'updatedAt' field.
   * @return The value of the 'updatedAt' field.
   */
  public java.lang.Object getUpdatedAt() {
    return updatedAt;
  }


  /**
   * Sets the value of the 'updatedAt' field.
   * @param value the value to set.
   */
  public void setUpdatedAt(java.lang.Object value) {
    this.updatedAt = value;
  }

  /**
   * Gets the value of the 'userUpdated' field.
   * @return The value of the 'userUpdated' field.
   */
  public java.lang.CharSequence getUserUpdated() {
    return userUpdated;
  }


  /**
   * Sets the value of the 'userUpdated' field.
   * @param value the value to set.
   */
  public void setUserUpdated(java.lang.CharSequence value) {
    this.userUpdated = value;
  }

  /**
   * Creates a new address_updated RecordBuilder.
   * @return A new address_updated RecordBuilder
   */
  public static Builder newBuilder() {
    return new address_updated.Builder();
  }

  /**
   * Creates a new address_updated RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new address_updated RecordBuilder
   */
  public static Builder newBuilder(address_updated.Builder other) {
    if (other == null) {
      return new address_updated.Builder();
    } else {
      return new address_updated.Builder(other);
    }
  }

  /**
   * Creates a new address_updated RecordBuilder by copying an existing address_updated instance.
   * @param other The existing instance to copy.
   * @return A new address_updated RecordBuilder
   */
  public static Builder newBuilder(address_updated other) {
    if (other == null) {
      return new address_updated.Builder();
    } else {
      return new address_updated.Builder(other);
    }
  }

  /**
   * RecordBuilder for address_updated instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<address_updated>
    implements org.apache.avro.data.RecordBuilder<address_updated> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence addressType;
    private java.lang.Boolean defaultAddress;
    private java.time.Instant latestEndDate;
    private java.time.Instant latestStartDate;
    private java.lang.CharSequence mailingCity;
    private java.lang.CharSequence mailingCountry;
    private java.lang.CharSequence mailingPostalCode;
    private java.lang.CharSequence mailingState;
    private java.lang.CharSequence mailingStreet;
    private java.lang.CharSequence mailingStreet2;
    private java.lang.CharSequence seasonAlendDay;
    private java.lang.CharSequence seasonAlendMonth;
    private java.lang.CharSequence seasonAlendYear;
    private java.lang.CharSequence seasonalStartDay;
    private java.lang.CharSequence seasonalStartMonth;
    private java.lang.CharSequence seasonalStartYear;
    private java.lang.Object updatedAt;
    private java.lang.CharSequence userUpdated;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(address_updated.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.addressType)) {
        this.addressType = data().deepCopy(fields()[1].schema(), other.addressType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.defaultAddress)) {
        this.defaultAddress = data().deepCopy(fields()[2].schema(), other.defaultAddress);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.latestEndDate)) {
        this.latestEndDate = data().deepCopy(fields()[3].schema(), other.latestEndDate);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.latestStartDate)) {
        this.latestStartDate = data().deepCopy(fields()[4].schema(), other.latestStartDate);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.mailingCity)) {
        this.mailingCity = data().deepCopy(fields()[5].schema(), other.mailingCity);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.mailingCountry)) {
        this.mailingCountry = data().deepCopy(fields()[6].schema(), other.mailingCountry);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.mailingPostalCode)) {
        this.mailingPostalCode = data().deepCopy(fields()[7].schema(), other.mailingPostalCode);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.mailingState)) {
        this.mailingState = data().deepCopy(fields()[8].schema(), other.mailingState);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.mailingStreet)) {
        this.mailingStreet = data().deepCopy(fields()[9].schema(), other.mailingStreet);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.mailingStreet2)) {
        this.mailingStreet2 = data().deepCopy(fields()[10].schema(), other.mailingStreet2);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.seasonAlendDay)) {
        this.seasonAlendDay = data().deepCopy(fields()[11].schema(), other.seasonAlendDay);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.seasonAlendMonth)) {
        this.seasonAlendMonth = data().deepCopy(fields()[12].schema(), other.seasonAlendMonth);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.seasonAlendYear)) {
        this.seasonAlendYear = data().deepCopy(fields()[13].schema(), other.seasonAlendYear);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.seasonalStartDay)) {
        this.seasonalStartDay = data().deepCopy(fields()[14].schema(), other.seasonalStartDay);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.seasonalStartMonth)) {
        this.seasonalStartMonth = data().deepCopy(fields()[15].schema(), other.seasonalStartMonth);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.seasonalStartYear)) {
        this.seasonalStartYear = data().deepCopy(fields()[16].schema(), other.seasonalStartYear);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[17].schema(), other.updatedAt);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.userUpdated)) {
        this.userUpdated = data().deepCopy(fields()[18].schema(), other.userUpdated);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
    }

    /**
     * Creates a Builder by copying an existing address_updated instance
     * @param other The existing instance to copy.
     */
    private Builder(address_updated other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.addressType)) {
        this.addressType = data().deepCopy(fields()[1].schema(), other.addressType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.defaultAddress)) {
        this.defaultAddress = data().deepCopy(fields()[2].schema(), other.defaultAddress);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.latestEndDate)) {
        this.latestEndDate = data().deepCopy(fields()[3].schema(), other.latestEndDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.latestStartDate)) {
        this.latestStartDate = data().deepCopy(fields()[4].schema(), other.latestStartDate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.mailingCity)) {
        this.mailingCity = data().deepCopy(fields()[5].schema(), other.mailingCity);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.mailingCountry)) {
        this.mailingCountry = data().deepCopy(fields()[6].schema(), other.mailingCountry);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.mailingPostalCode)) {
        this.mailingPostalCode = data().deepCopy(fields()[7].schema(), other.mailingPostalCode);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.mailingState)) {
        this.mailingState = data().deepCopy(fields()[8].schema(), other.mailingState);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.mailingStreet)) {
        this.mailingStreet = data().deepCopy(fields()[9].schema(), other.mailingStreet);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.mailingStreet2)) {
        this.mailingStreet2 = data().deepCopy(fields()[10].schema(), other.mailingStreet2);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.seasonAlendDay)) {
        this.seasonAlendDay = data().deepCopy(fields()[11].schema(), other.seasonAlendDay);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.seasonAlendMonth)) {
        this.seasonAlendMonth = data().deepCopy(fields()[12].schema(), other.seasonAlendMonth);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.seasonAlendYear)) {
        this.seasonAlendYear = data().deepCopy(fields()[13].schema(), other.seasonAlendYear);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.seasonalStartDay)) {
        this.seasonalStartDay = data().deepCopy(fields()[14].schema(), other.seasonalStartDay);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.seasonalStartMonth)) {
        this.seasonalStartMonth = data().deepCopy(fields()[15].schema(), other.seasonalStartMonth);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.seasonalStartYear)) {
        this.seasonalStartYear = data().deepCopy(fields()[16].schema(), other.seasonalStartYear);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[17].schema(), other.updatedAt);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.userUpdated)) {
        this.userUpdated = data().deepCopy(fields()[18].schema(), other.userUpdated);
        fieldSetFlags()[18] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'addressType' field.
      * @return The value.
      */
    public java.lang.CharSequence getAddressType() {
      return addressType;
    }


    /**
      * Sets the value of the 'addressType' field.
      * @param value The value of 'addressType'.
      * @return This builder.
      */
    public Builder setAddressType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.addressType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'addressType' field has been set.
      * @return True if the 'addressType' field has been set, false otherwise.
      */
    public boolean hasAddressType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'addressType' field.
      * @return This builder.
      */
    public Builder clearAddressType() {
      addressType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'defaultAddress' field.
      * @return The value.
      */
    public java.lang.Boolean getDefaultAddress() {
      return defaultAddress;
    }


    /**
      * Sets the value of the 'defaultAddress' field.
      * @param value The value of 'defaultAddress'.
      * @return This builder.
      */
    public Builder setDefaultAddress(java.lang.Boolean value) {
      validate(fields()[2], value);
      this.defaultAddress = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'defaultAddress' field has been set.
      * @return True if the 'defaultAddress' field has been set, false otherwise.
      */
    public boolean hasDefaultAddress() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'defaultAddress' field.
      * @return This builder.
      */
    public Builder clearDefaultAddress() {
      defaultAddress = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'latestEndDate' field.
      * @return The value.
      */
    public java.time.Instant getLatestEndDate() {
      return latestEndDate;
    }


    /**
      * Sets the value of the 'latestEndDate' field.
      * @param value The value of 'latestEndDate'.
      * @return This builder.
      */
    public Builder setLatestEndDate(java.time.Instant value) {
      validate(fields()[3], value);
      this.latestEndDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'latestEndDate' field has been set.
      * @return True if the 'latestEndDate' field has been set, false otherwise.
      */
    public boolean hasLatestEndDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'latestEndDate' field.
      * @return This builder.
      */
    public Builder clearLatestEndDate() {
      latestEndDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'latestStartDate' field.
      * @return The value.
      */
    public java.time.Instant getLatestStartDate() {
      return latestStartDate;
    }


    /**
      * Sets the value of the 'latestStartDate' field.
      * @param value The value of 'latestStartDate'.
      * @return This builder.
      */
    public Builder setLatestStartDate(java.time.Instant value) {
      validate(fields()[4], value);
      this.latestStartDate = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'latestStartDate' field has been set.
      * @return True if the 'latestStartDate' field has been set, false otherwise.
      */
    public boolean hasLatestStartDate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'latestStartDate' field.
      * @return This builder.
      */
    public Builder clearLatestStartDate() {
      latestStartDate = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'mailingCity' field.
      * @return The value.
      */
    public java.lang.CharSequence getMailingCity() {
      return mailingCity;
    }


    /**
      * Sets the value of the 'mailingCity' field.
      * @param value The value of 'mailingCity'.
      * @return This builder.
      */
    public Builder setMailingCity(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.mailingCity = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'mailingCity' field has been set.
      * @return True if the 'mailingCity' field has been set, false otherwise.
      */
    public boolean hasMailingCity() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'mailingCity' field.
      * @return This builder.
      */
    public Builder clearMailingCity() {
      mailingCity = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'mailingCountry' field.
      * @return The value.
      */
    public java.lang.CharSequence getMailingCountry() {
      return mailingCountry;
    }


    /**
      * Sets the value of the 'mailingCountry' field.
      * @param value The value of 'mailingCountry'.
      * @return This builder.
      */
    public Builder setMailingCountry(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.mailingCountry = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'mailingCountry' field has been set.
      * @return True if the 'mailingCountry' field has been set, false otherwise.
      */
    public boolean hasMailingCountry() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'mailingCountry' field.
      * @return This builder.
      */
    public Builder clearMailingCountry() {
      mailingCountry = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'mailingPostalCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getMailingPostalCode() {
      return mailingPostalCode;
    }


    /**
      * Sets the value of the 'mailingPostalCode' field.
      * @param value The value of 'mailingPostalCode'.
      * @return This builder.
      */
    public Builder setMailingPostalCode(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.mailingPostalCode = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'mailingPostalCode' field has been set.
      * @return True if the 'mailingPostalCode' field has been set, false otherwise.
      */
    public boolean hasMailingPostalCode() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'mailingPostalCode' field.
      * @return This builder.
      */
    public Builder clearMailingPostalCode() {
      mailingPostalCode = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'mailingState' field.
      * @return The value.
      */
    public java.lang.CharSequence getMailingState() {
      return mailingState;
    }


    /**
      * Sets the value of the 'mailingState' field.
      * @param value The value of 'mailingState'.
      * @return This builder.
      */
    public Builder setMailingState(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.mailingState = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'mailingState' field has been set.
      * @return True if the 'mailingState' field has been set, false otherwise.
      */
    public boolean hasMailingState() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'mailingState' field.
      * @return This builder.
      */
    public Builder clearMailingState() {
      mailingState = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'mailingStreet' field.
      * @return The value.
      */
    public java.lang.CharSequence getMailingStreet() {
      return mailingStreet;
    }


    /**
      * Sets the value of the 'mailingStreet' field.
      * @param value The value of 'mailingStreet'.
      * @return This builder.
      */
    public Builder setMailingStreet(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.mailingStreet = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'mailingStreet' field has been set.
      * @return True if the 'mailingStreet' field has been set, false otherwise.
      */
    public boolean hasMailingStreet() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'mailingStreet' field.
      * @return This builder.
      */
    public Builder clearMailingStreet() {
      mailingStreet = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'mailingStreet2' field.
      * @return The value.
      */
    public java.lang.CharSequence getMailingStreet2() {
      return mailingStreet2;
    }


    /**
      * Sets the value of the 'mailingStreet2' field.
      * @param value The value of 'mailingStreet2'.
      * @return This builder.
      */
    public Builder setMailingStreet2(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.mailingStreet2 = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'mailingStreet2' field has been set.
      * @return True if the 'mailingStreet2' field has been set, false otherwise.
      */
    public boolean hasMailingStreet2() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'mailingStreet2' field.
      * @return This builder.
      */
    public Builder clearMailingStreet2() {
      mailingStreet2 = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'seasonAlendDay' field.
      * @return The value.
      */
    public java.lang.CharSequence getSeasonAlendDay() {
      return seasonAlendDay;
    }


    /**
      * Sets the value of the 'seasonAlendDay' field.
      * @param value The value of 'seasonAlendDay'.
      * @return This builder.
      */
    public Builder setSeasonAlendDay(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.seasonAlendDay = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'seasonAlendDay' field has been set.
      * @return True if the 'seasonAlendDay' field has been set, false otherwise.
      */
    public boolean hasSeasonAlendDay() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'seasonAlendDay' field.
      * @return This builder.
      */
    public Builder clearSeasonAlendDay() {
      seasonAlendDay = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'seasonAlendMonth' field.
      * @return The value.
      */
    public java.lang.CharSequence getSeasonAlendMonth() {
      return seasonAlendMonth;
    }


    /**
      * Sets the value of the 'seasonAlendMonth' field.
      * @param value The value of 'seasonAlendMonth'.
      * @return This builder.
      */
    public Builder setSeasonAlendMonth(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.seasonAlendMonth = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'seasonAlendMonth' field has been set.
      * @return True if the 'seasonAlendMonth' field has been set, false otherwise.
      */
    public boolean hasSeasonAlendMonth() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'seasonAlendMonth' field.
      * @return This builder.
      */
    public Builder clearSeasonAlendMonth() {
      seasonAlendMonth = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'seasonAlendYear' field.
      * @return The value.
      */
    public java.lang.CharSequence getSeasonAlendYear() {
      return seasonAlendYear;
    }


    /**
      * Sets the value of the 'seasonAlendYear' field.
      * @param value The value of 'seasonAlendYear'.
      * @return This builder.
      */
    public Builder setSeasonAlendYear(java.lang.CharSequence value) {
      validate(fields()[13], value);
      this.seasonAlendYear = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'seasonAlendYear' field has been set.
      * @return True if the 'seasonAlendYear' field has been set, false otherwise.
      */
    public boolean hasSeasonAlendYear() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'seasonAlendYear' field.
      * @return This builder.
      */
    public Builder clearSeasonAlendYear() {
      seasonAlendYear = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'seasonalStartDay' field.
      * @return The value.
      */
    public java.lang.CharSequence getSeasonalStartDay() {
      return seasonalStartDay;
    }


    /**
      * Sets the value of the 'seasonalStartDay' field.
      * @param value The value of 'seasonalStartDay'.
      * @return This builder.
      */
    public Builder setSeasonalStartDay(java.lang.CharSequence value) {
      validate(fields()[14], value);
      this.seasonalStartDay = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'seasonalStartDay' field has been set.
      * @return True if the 'seasonalStartDay' field has been set, false otherwise.
      */
    public boolean hasSeasonalStartDay() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'seasonalStartDay' field.
      * @return This builder.
      */
    public Builder clearSeasonalStartDay() {
      seasonalStartDay = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'seasonalStartMonth' field.
      * @return The value.
      */
    public java.lang.CharSequence getSeasonalStartMonth() {
      return seasonalStartMonth;
    }


    /**
      * Sets the value of the 'seasonalStartMonth' field.
      * @param value The value of 'seasonalStartMonth'.
      * @return This builder.
      */
    public Builder setSeasonalStartMonth(java.lang.CharSequence value) {
      validate(fields()[15], value);
      this.seasonalStartMonth = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'seasonalStartMonth' field has been set.
      * @return True if the 'seasonalStartMonth' field has been set, false otherwise.
      */
    public boolean hasSeasonalStartMonth() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'seasonalStartMonth' field.
      * @return This builder.
      */
    public Builder clearSeasonalStartMonth() {
      seasonalStartMonth = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'seasonalStartYear' field.
      * @return The value.
      */
    public java.lang.CharSequence getSeasonalStartYear() {
      return seasonalStartYear;
    }


    /**
      * Sets the value of the 'seasonalStartYear' field.
      * @param value The value of 'seasonalStartYear'.
      * @return This builder.
      */
    public Builder setSeasonalStartYear(java.lang.CharSequence value) {
      validate(fields()[16], value);
      this.seasonalStartYear = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'seasonalStartYear' field has been set.
      * @return True if the 'seasonalStartYear' field has been set, false otherwise.
      */
    public boolean hasSeasonalStartYear() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'seasonalStartYear' field.
      * @return This builder.
      */
    public Builder clearSeasonalStartYear() {
      seasonalStartYear = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'updatedAt' field.
      * @return The value.
      */
    public java.lang.Object getUpdatedAt() {
      return updatedAt;
    }


    /**
      * Sets the value of the 'updatedAt' field.
      * @param value The value of 'updatedAt'.
      * @return This builder.
      */
    public Builder setUpdatedAt(java.lang.Object value) {
      validate(fields()[17], value);
      this.updatedAt = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'updatedAt' field has been set.
      * @return True if the 'updatedAt' field has been set, false otherwise.
      */
    public boolean hasUpdatedAt() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'updatedAt' field.
      * @return This builder.
      */
    public Builder clearUpdatedAt() {
      updatedAt = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'userUpdated' field.
      * @return The value.
      */
    public java.lang.CharSequence getUserUpdated() {
      return userUpdated;
    }


    /**
      * Sets the value of the 'userUpdated' field.
      * @param value The value of 'userUpdated'.
      * @return This builder.
      */
    public Builder setUserUpdated(java.lang.CharSequence value) {
      validate(fields()[18], value);
      this.userUpdated = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'userUpdated' field has been set.
      * @return True if the 'userUpdated' field has been set, false otherwise.
      */
    public boolean hasUserUpdated() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'userUpdated' field.
      * @return This builder.
      */
    public Builder clearUserUpdated() {
      userUpdated = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public address_updated build() {
      try {
        address_updated record = new address_updated();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.addressType = fieldSetFlags()[1] ? this.addressType : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.defaultAddress = fieldSetFlags()[2] ? this.defaultAddress : (java.lang.Boolean) defaultValue(fields()[2]);
        record.latestEndDate = fieldSetFlags()[3] ? this.latestEndDate : (java.time.Instant) defaultValue(fields()[3]);
        record.latestStartDate = fieldSetFlags()[4] ? this.latestStartDate : (java.time.Instant) defaultValue(fields()[4]);
        record.mailingCity = fieldSetFlags()[5] ? this.mailingCity : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.mailingCountry = fieldSetFlags()[6] ? this.mailingCountry : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.mailingPostalCode = fieldSetFlags()[7] ? this.mailingPostalCode : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.mailingState = fieldSetFlags()[8] ? this.mailingState : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.mailingStreet = fieldSetFlags()[9] ? this.mailingStreet : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.mailingStreet2 = fieldSetFlags()[10] ? this.mailingStreet2 : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.seasonAlendDay = fieldSetFlags()[11] ? this.seasonAlendDay : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.seasonAlendMonth = fieldSetFlags()[12] ? this.seasonAlendMonth : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.seasonAlendYear = fieldSetFlags()[13] ? this.seasonAlendYear : (java.lang.CharSequence) defaultValue(fields()[13]);
        record.seasonalStartDay = fieldSetFlags()[14] ? this.seasonalStartDay : (java.lang.CharSequence) defaultValue(fields()[14]);
        record.seasonalStartMonth = fieldSetFlags()[15] ? this.seasonalStartMonth : (java.lang.CharSequence) defaultValue(fields()[15]);
        record.seasonalStartYear = fieldSetFlags()[16] ? this.seasonalStartYear : (java.lang.CharSequence) defaultValue(fields()[16]);
        record.updatedAt = fieldSetFlags()[17] ? this.updatedAt :  defaultValue(fields()[17]);
        record.userUpdated = fieldSetFlags()[18] ? this.userUpdated : (java.lang.CharSequence) defaultValue(fields()[18]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<address_updated>
    WRITER$ = (org.apache.avro.io.DatumWriter<address_updated>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<address_updated>
    READER$ = (org.apache.avro.io.DatumReader<address_updated>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










