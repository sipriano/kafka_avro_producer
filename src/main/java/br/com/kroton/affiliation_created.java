/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package br.com.kroton;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class affiliation_created extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5411473604621572793L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"affiliation_created\",\"namespace\":\"br.com.kroton\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"role\",\"type\":\"string\"},{\"name\":\"contact\",\"type\":\"string\"},{\"name\":\"account\",\"type\":\"string\"},{\"name\":\"startDate\",\"type\":[\"null\",{\"type\":\"long\",\"connect.version\":1,\"connect.name\":\"org.apache.kafka.connect.data.Timestamp\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"endDate\",\"type\":[\"null\",{\"type\":\"long\",\"connect.version\":1,\"connect.name\":\"org.apache.kafka.connect.data.Timestamp\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"primary\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"createdAt\",\"type\":[{\"type\":\"long\",\"connect.version\":1,\"connect.name\":\"org.apache.kafka.connect.data.Timestamp\",\"logicalType\":\"timestamp-millis\"}]},{\"name\":\"userCreated\",\"type\":\"string\"}],\"connect.name\":\"affiliation_created\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<affiliation_created> ENCODER =
      new BinaryMessageEncoder<affiliation_created>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<affiliation_created> DECODER =
      new BinaryMessageDecoder<affiliation_created>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<affiliation_created> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<affiliation_created> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<affiliation_created> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<affiliation_created>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this affiliation_created to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a affiliation_created from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a affiliation_created instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static affiliation_created fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence id;
   private java.lang.CharSequence description;
   private java.lang.CharSequence role;
   private java.lang.CharSequence contact;
   private java.lang.CharSequence account;
   private java.time.Instant startDate;
   private java.time.Instant endDate;
   private java.lang.CharSequence status;
   private java.lang.Boolean primary;
   private java.lang.Object createdAt;
   private java.lang.CharSequence userCreated;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public affiliation_created() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param description The new value for description
   * @param role The new value for role
   * @param contact The new value for contact
   * @param account The new value for account
   * @param startDate The new value for startDate
   * @param endDate The new value for endDate
   * @param status The new value for status
   * @param primary The new value for primary
   * @param createdAt The new value for createdAt
   * @param userCreated The new value for userCreated
   */
  public affiliation_created(java.lang.CharSequence id, java.lang.CharSequence description, java.lang.CharSequence role, java.lang.CharSequence contact, java.lang.CharSequence account, java.time.Instant startDate, java.time.Instant endDate, java.lang.CharSequence status, java.lang.Boolean primary, java.lang.Object createdAt, java.lang.CharSequence userCreated) {
    this.id = id;
    this.description = description;
    this.role = role;
    this.contact = contact;
    this.account = account;
    this.startDate = startDate;
    this.endDate = endDate;
    this.status = status;
    this.primary = primary;
    this.createdAt = createdAt;
    this.userCreated = userCreated;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return description;
    case 2: return role;
    case 3: return contact;
    case 4: return account;
    case 5: return startDate;
    case 6: return endDate;
    case 7: return status;
    case 8: return primary;
    case 9: return createdAt;
    case 10: return userCreated;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: description = (java.lang.CharSequence)value$; break;
    case 2: role = (java.lang.CharSequence)value$; break;
    case 3: contact = (java.lang.CharSequence)value$; break;
    case 4: account = (java.lang.CharSequence)value$; break;
    case 5: startDate = (java.time.Instant)value$; break;
    case 6: endDate = (java.time.Instant)value$; break;
    case 7: status = (java.lang.CharSequence)value$; break;
    case 8: primary = (java.lang.Boolean)value$; break;
    case 9: createdAt = value$; break;
    case 10: userCreated = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'role' field.
   * @return The value of the 'role' field.
   */
  public java.lang.CharSequence getRole() {
    return role;
  }


  /**
   * Sets the value of the 'role' field.
   * @param value the value to set.
   */
  public void setRole(java.lang.CharSequence value) {
    this.role = value;
  }

  /**
   * Gets the value of the 'contact' field.
   * @return The value of the 'contact' field.
   */
  public java.lang.CharSequence getContact() {
    return contact;
  }


  /**
   * Sets the value of the 'contact' field.
   * @param value the value to set.
   */
  public void setContact(java.lang.CharSequence value) {
    this.contact = value;
  }

  /**
   * Gets the value of the 'account' field.
   * @return The value of the 'account' field.
   */
  public java.lang.CharSequence getAccount() {
    return account;
  }


  /**
   * Sets the value of the 'account' field.
   * @param value the value to set.
   */
  public void setAccount(java.lang.CharSequence value) {
    this.account = value;
  }

  /**
   * Gets the value of the 'startDate' field.
   * @return The value of the 'startDate' field.
   */
  public java.time.Instant getStartDate() {
    return startDate;
  }


  /**
   * Sets the value of the 'startDate' field.
   * @param value the value to set.
   */
  public void setStartDate(java.time.Instant value) {
    this.startDate = value;
  }

  /**
   * Gets the value of the 'endDate' field.
   * @return The value of the 'endDate' field.
   */
  public java.time.Instant getEndDate() {
    return endDate;
  }


  /**
   * Sets the value of the 'endDate' field.
   * @param value the value to set.
   */
  public void setEndDate(java.time.Instant value) {
    this.endDate = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'primary' field.
   * @return The value of the 'primary' field.
   */
  public java.lang.Boolean getPrimary() {
    return primary;
  }


  /**
   * Sets the value of the 'primary' field.
   * @param value the value to set.
   */
  public void setPrimary(java.lang.Boolean value) {
    this.primary = value;
  }

  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public java.lang.Object getCreatedAt() {
    return createdAt;
  }


  /**
   * Sets the value of the 'createdAt' field.
   * @param value the value to set.
   */
  public void setCreatedAt(java.lang.Object value) {
    this.createdAt = value;
  }

  /**
   * Gets the value of the 'userCreated' field.
   * @return The value of the 'userCreated' field.
   */
  public java.lang.CharSequence getUserCreated() {
    return userCreated;
  }


  /**
   * Sets the value of the 'userCreated' field.
   * @param value the value to set.
   */
  public void setUserCreated(java.lang.CharSequence value) {
    this.userCreated = value;
  }

  /**
   * Creates a new affiliation_created RecordBuilder.
   * @return A new affiliation_created RecordBuilder
   */
  public static Builder newBuilder() {
    return new affiliation_created.Builder();
  }

  /**
   * Creates a new affiliation_created RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new affiliation_created RecordBuilder
   */
  public static Builder newBuilder(affiliation_created.Builder other) {
    if (other == null) {
      return new affiliation_created.Builder();
    } else {
      return new affiliation_created.Builder(other);
    }
  }

  /**
   * Creates a new affiliation_created RecordBuilder by copying an existing affiliation_created instance.
   * @param other The existing instance to copy.
   * @return A new affiliation_created RecordBuilder
   */
  public static Builder newBuilder(affiliation_created other) {
    if (other == null) {
      return new affiliation_created.Builder();
    } else {
      return new affiliation_created.Builder(other);
    }
  }

  /**
   * RecordBuilder for affiliation_created instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<affiliation_created>
    implements org.apache.avro.data.RecordBuilder<affiliation_created> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence description;
    private java.lang.CharSequence role;
    private java.lang.CharSequence contact;
    private java.lang.CharSequence account;
    private java.time.Instant startDate;
    private java.time.Instant endDate;
    private java.lang.CharSequence status;
    private java.lang.Boolean primary;
    private java.lang.Object createdAt;
    private java.lang.CharSequence userCreated;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(affiliation_created.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.description)) {
        this.description = data().deepCopy(fields()[1].schema(), other.description);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.role)) {
        this.role = data().deepCopy(fields()[2].schema(), other.role);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.contact)) {
        this.contact = data().deepCopy(fields()[3].schema(), other.contact);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.account)) {
        this.account = data().deepCopy(fields()[4].schema(), other.account);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.startDate)) {
        this.startDate = data().deepCopy(fields()[5].schema(), other.startDate);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.endDate)) {
        this.endDate = data().deepCopy(fields()[6].schema(), other.endDate);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.status)) {
        this.status = data().deepCopy(fields()[7].schema(), other.status);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.primary)) {
        this.primary = data().deepCopy(fields()[8].schema(), other.primary);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[9].schema(), other.createdAt);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.userCreated)) {
        this.userCreated = data().deepCopy(fields()[10].schema(), other.userCreated);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
    }

    /**
     * Creates a Builder by copying an existing affiliation_created instance
     * @param other The existing instance to copy.
     */
    private Builder(affiliation_created other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.description)) {
        this.description = data().deepCopy(fields()[1].schema(), other.description);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.role)) {
        this.role = data().deepCopy(fields()[2].schema(), other.role);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.contact)) {
        this.contact = data().deepCopy(fields()[3].schema(), other.contact);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.account)) {
        this.account = data().deepCopy(fields()[4].schema(), other.account);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.startDate)) {
        this.startDate = data().deepCopy(fields()[5].schema(), other.startDate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.endDate)) {
        this.endDate = data().deepCopy(fields()[6].schema(), other.endDate);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.status)) {
        this.status = data().deepCopy(fields()[7].schema(), other.status);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.primary)) {
        this.primary = data().deepCopy(fields()[8].schema(), other.primary);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[9].schema(), other.createdAt);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.userCreated)) {
        this.userCreated = data().deepCopy(fields()[10].schema(), other.userCreated);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.description = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public Builder clearDescription() {
      description = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'role' field.
      * @return The value.
      */
    public java.lang.CharSequence getRole() {
      return role;
    }


    /**
      * Sets the value of the 'role' field.
      * @param value The value of 'role'.
      * @return This builder.
      */
    public Builder setRole(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.role = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'role' field has been set.
      * @return True if the 'role' field has been set, false otherwise.
      */
    public boolean hasRole() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'role' field.
      * @return This builder.
      */
    public Builder clearRole() {
      role = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'contact' field.
      * @return The value.
      */
    public java.lang.CharSequence getContact() {
      return contact;
    }


    /**
      * Sets the value of the 'contact' field.
      * @param value The value of 'contact'.
      * @return This builder.
      */
    public Builder setContact(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.contact = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'contact' field has been set.
      * @return True if the 'contact' field has been set, false otherwise.
      */
    public boolean hasContact() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'contact' field.
      * @return This builder.
      */
    public Builder clearContact() {
      contact = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'account' field.
      * @return The value.
      */
    public java.lang.CharSequence getAccount() {
      return account;
    }


    /**
      * Sets the value of the 'account' field.
      * @param value The value of 'account'.
      * @return This builder.
      */
    public Builder setAccount(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.account = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'account' field has been set.
      * @return True if the 'account' field has been set, false otherwise.
      */
    public boolean hasAccount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'account' field.
      * @return This builder.
      */
    public Builder clearAccount() {
      account = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'startDate' field.
      * @return The value.
      */
    public java.time.Instant getStartDate() {
      return startDate;
    }


    /**
      * Sets the value of the 'startDate' field.
      * @param value The value of 'startDate'.
      * @return This builder.
      */
    public Builder setStartDate(java.time.Instant value) {
      validate(fields()[5], value);
      this.startDate = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'startDate' field has been set.
      * @return True if the 'startDate' field has been set, false otherwise.
      */
    public boolean hasStartDate() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'startDate' field.
      * @return This builder.
      */
    public Builder clearStartDate() {
      startDate = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'endDate' field.
      * @return The value.
      */
    public java.time.Instant getEndDate() {
      return endDate;
    }


    /**
      * Sets the value of the 'endDate' field.
      * @param value The value of 'endDate'.
      * @return This builder.
      */
    public Builder setEndDate(java.time.Instant value) {
      validate(fields()[6], value);
      this.endDate = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'endDate' field has been set.
      * @return True if the 'endDate' field has been set, false otherwise.
      */
    public boolean hasEndDate() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'endDate' field.
      * @return This builder.
      */
    public Builder clearEndDate() {
      endDate = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.status = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public Builder clearStatus() {
      status = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'primary' field.
      * @return The value.
      */
    public java.lang.Boolean getPrimary() {
      return primary;
    }


    /**
      * Sets the value of the 'primary' field.
      * @param value The value of 'primary'.
      * @return This builder.
      */
    public Builder setPrimary(java.lang.Boolean value) {
      validate(fields()[8], value);
      this.primary = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'primary' field has been set.
      * @return True if the 'primary' field has been set, false otherwise.
      */
    public boolean hasPrimary() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'primary' field.
      * @return This builder.
      */
    public Builder clearPrimary() {
      primary = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public java.lang.Object getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public Builder setCreatedAt(java.lang.Object value) {
      validate(fields()[9], value);
      this.createdAt = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public Builder clearCreatedAt() {
      createdAt = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'userCreated' field.
      * @return The value.
      */
    public java.lang.CharSequence getUserCreated() {
      return userCreated;
    }


    /**
      * Sets the value of the 'userCreated' field.
      * @param value The value of 'userCreated'.
      * @return This builder.
      */
    public Builder setUserCreated(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.userCreated = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'userCreated' field has been set.
      * @return True if the 'userCreated' field has been set, false otherwise.
      */
    public boolean hasUserCreated() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'userCreated' field.
      * @return This builder.
      */
    public Builder clearUserCreated() {
      userCreated = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public affiliation_created build() {
      try {
        affiliation_created record = new affiliation_created();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.description = fieldSetFlags()[1] ? this.description : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.role = fieldSetFlags()[2] ? this.role : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.contact = fieldSetFlags()[3] ? this.contact : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.account = fieldSetFlags()[4] ? this.account : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.startDate = fieldSetFlags()[5] ? this.startDate : (java.time.Instant) defaultValue(fields()[5]);
        record.endDate = fieldSetFlags()[6] ? this.endDate : (java.time.Instant) defaultValue(fields()[6]);
        record.status = fieldSetFlags()[7] ? this.status : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.primary = fieldSetFlags()[8] ? this.primary : (java.lang.Boolean) defaultValue(fields()[8]);
        record.createdAt = fieldSetFlags()[9] ? this.createdAt :  defaultValue(fields()[9]);
        record.userCreated = fieldSetFlags()[10] ? this.userCreated : (java.lang.CharSequence) defaultValue(fields()[10]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<affiliation_created>
    WRITER$ = (org.apache.avro.io.DatumWriter<affiliation_created>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<affiliation_created>
    READER$ = (org.apache.avro.io.DatumReader<affiliation_created>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










