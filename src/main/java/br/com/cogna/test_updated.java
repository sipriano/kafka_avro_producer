/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package br.com.cogna;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class test_updated extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -378250182852082597L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"test_updated\",\"namespace\":\"br.com.cogna\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"dateReceived\",\"type\":[\"null\",{\"type\":\"int\",\"connect.name\":\"org.apache.kafka.connect.data.Date\",\"connect.version\":1,\"logicalType\":\"date\"}],\"default\":null},{\"name\":\"source\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"testDate\",\"type\":[\"null\",{\"type\":\"int\",\"connect.name\":\"org.apache.kafka.connect.data.Date\",\"connect.version\":1,\"logicalType\":\"date\"}],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"contact\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"year\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"recordActive\",\"type\":\"boolean\"},{\"name\":\"updatedAt\",\"type\":[{\"type\":\"long\",\"connect.version\":1,\"connect.name\":\"org.apache.kafka.connect.data.Timestamp\",\"logicalType\":\"timestamp-millis\"}]},{\"name\":\"userUpdated\",\"type\":[\"null\",\"string\"],\"default\":null}],\"connect.name\":\"br.com.cogna.test_updated\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<test_updated> ENCODER =
      new BinaryMessageEncoder<test_updated>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<test_updated> DECODER =
      new BinaryMessageDecoder<test_updated>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<test_updated> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<test_updated> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<test_updated> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<test_updated>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this test_updated to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a test_updated from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a test_updated instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static test_updated fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence id;
   private java.time.LocalDate dateReceived;
   private java.lang.CharSequence source;
   private java.time.LocalDate testDate;
   private java.lang.CharSequence type;
   private java.lang.CharSequence contact;
   private java.lang.CharSequence code;
   private java.lang.Integer year;
   private boolean recordActive;
   private java.lang.Object updatedAt;
   private java.lang.CharSequence userUpdated;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public test_updated() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param dateReceived The new value for dateReceived
   * @param source The new value for source
   * @param testDate The new value for testDate
   * @param type The new value for type
   * @param contact The new value for contact
   * @param code The new value for code
   * @param year The new value for year
   * @param recordActive The new value for recordActive
   * @param updatedAt The new value for updatedAt
   * @param userUpdated The new value for userUpdated
   */
  public test_updated(java.lang.CharSequence id, java.time.LocalDate dateReceived, java.lang.CharSequence source, java.time.LocalDate testDate, java.lang.CharSequence type, java.lang.CharSequence contact, java.lang.CharSequence code, java.lang.Integer year, java.lang.Boolean recordActive, java.lang.Object updatedAt, java.lang.CharSequence userUpdated) {
    this.id = id;
    this.dateReceived = dateReceived;
    this.source = source;
    this.testDate = testDate;
    this.type = type;
    this.contact = contact;
    this.code = code;
    this.year = year;
    this.recordActive = recordActive;
    this.updatedAt = updatedAt;
    this.userUpdated = userUpdated;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return dateReceived;
    case 2: return source;
    case 3: return testDate;
    case 4: return type;
    case 5: return contact;
    case 6: return code;
    case 7: return year;
    case 8: return recordActive;
    case 9: return updatedAt;
    case 10: return userUpdated;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: dateReceived = (java.time.LocalDate)value$; break;
    case 2: source = (java.lang.CharSequence)value$; break;
    case 3: testDate = (java.time.LocalDate)value$; break;
    case 4: type = (java.lang.CharSequence)value$; break;
    case 5: contact = (java.lang.CharSequence)value$; break;
    case 6: code = (java.lang.CharSequence)value$; break;
    case 7: year = (java.lang.Integer)value$; break;
    case 8: recordActive = (java.lang.Boolean)value$; break;
    case 9: updatedAt = value$; break;
    case 10: userUpdated = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'dateReceived' field.
   * @return The value of the 'dateReceived' field.
   */
  public java.time.LocalDate getDateReceived() {
    return dateReceived;
  }


  /**
   * Sets the value of the 'dateReceived' field.
   * @param value the value to set.
   */
  public void setDateReceived(java.time.LocalDate value) {
    this.dateReceived = value;
  }

  /**
   * Gets the value of the 'source' field.
   * @return The value of the 'source' field.
   */
  public java.lang.CharSequence getSource() {
    return source;
  }


  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(java.lang.CharSequence value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'testDate' field.
   * @return The value of the 'testDate' field.
   */
  public java.time.LocalDate getTestDate() {
    return testDate;
  }


  /**
   * Sets the value of the 'testDate' field.
   * @param value the value to set.
   */
  public void setTestDate(java.time.LocalDate value) {
    this.testDate = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'contact' field.
   * @return The value of the 'contact' field.
   */
  public java.lang.CharSequence getContact() {
    return contact;
  }


  /**
   * Sets the value of the 'contact' field.
   * @param value the value to set.
   */
  public void setContact(java.lang.CharSequence value) {
    this.contact = value;
  }

  /**
   * Gets the value of the 'code' field.
   * @return The value of the 'code' field.
   */
  public java.lang.CharSequence getCode() {
    return code;
  }


  /**
   * Sets the value of the 'code' field.
   * @param value the value to set.
   */
  public void setCode(java.lang.CharSequence value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'year' field.
   * @return The value of the 'year' field.
   */
  public java.lang.Integer getYear() {
    return year;
  }


  /**
   * Sets the value of the 'year' field.
   * @param value the value to set.
   */
  public void setYear(java.lang.Integer value) {
    this.year = value;
  }

  /**
   * Gets the value of the 'recordActive' field.
   * @return The value of the 'recordActive' field.
   */
  public boolean getRecordActive() {
    return recordActive;
  }


  /**
   * Sets the value of the 'recordActive' field.
   * @param value the value to set.
   */
  public void setRecordActive(boolean value) {
    this.recordActive = value;
  }

  /**
   * Gets the value of the 'updatedAt' field.
   * @return The value of the 'updatedAt' field.
   */
  public java.lang.Object getUpdatedAt() {
    return updatedAt;
  }


  /**
   * Sets the value of the 'updatedAt' field.
   * @param value the value to set.
   */
  public void setUpdatedAt(java.lang.Object value) {
    this.updatedAt = value;
  }

  /**
   * Gets the value of the 'userUpdated' field.
   * @return The value of the 'userUpdated' field.
   */
  public java.lang.CharSequence getUserUpdated() {
    return userUpdated;
  }


  /**
   * Sets the value of the 'userUpdated' field.
   * @param value the value to set.
   */
  public void setUserUpdated(java.lang.CharSequence value) {
    this.userUpdated = value;
  }

  /**
   * Creates a new test_updated RecordBuilder.
   * @return A new test_updated RecordBuilder
   */
  public static br.com.cogna.test_updated.Builder newBuilder() {
    return new br.com.cogna.test_updated.Builder();
  }

  /**
   * Creates a new test_updated RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new test_updated RecordBuilder
   */
  public static br.com.cogna.test_updated.Builder newBuilder(br.com.cogna.test_updated.Builder other) {
    if (other == null) {
      return new br.com.cogna.test_updated.Builder();
    } else {
      return new br.com.cogna.test_updated.Builder(other);
    }
  }

  /**
   * Creates a new test_updated RecordBuilder by copying an existing test_updated instance.
   * @param other The existing instance to copy.
   * @return A new test_updated RecordBuilder
   */
  public static br.com.cogna.test_updated.Builder newBuilder(br.com.cogna.test_updated other) {
    if (other == null) {
      return new br.com.cogna.test_updated.Builder();
    } else {
      return new br.com.cogna.test_updated.Builder(other);
    }
  }

  /**
   * RecordBuilder for test_updated instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<test_updated>
    implements org.apache.avro.data.RecordBuilder<test_updated> {

    private java.lang.CharSequence id;
    private java.time.LocalDate dateReceived;
    private java.lang.CharSequence source;
    private java.time.LocalDate testDate;
    private java.lang.CharSequence type;
    private java.lang.CharSequence contact;
    private java.lang.CharSequence code;
    private java.lang.Integer year;
    private boolean recordActive;
    private java.lang.Object updatedAt;
    private java.lang.CharSequence userUpdated;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(br.com.cogna.test_updated.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.dateReceived)) {
        this.dateReceived = data().deepCopy(fields()[1].schema(), other.dateReceived);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.source)) {
        this.source = data().deepCopy(fields()[2].schema(), other.source);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.testDate)) {
        this.testDate = data().deepCopy(fields()[3].schema(), other.testDate);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.type)) {
        this.type = data().deepCopy(fields()[4].schema(), other.type);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.contact)) {
        this.contact = data().deepCopy(fields()[5].schema(), other.contact);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.code)) {
        this.code = data().deepCopy(fields()[6].schema(), other.code);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.year)) {
        this.year = data().deepCopy(fields()[7].schema(), other.year);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.recordActive)) {
        this.recordActive = data().deepCopy(fields()[8].schema(), other.recordActive);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[9].schema(), other.updatedAt);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.userUpdated)) {
        this.userUpdated = data().deepCopy(fields()[10].schema(), other.userUpdated);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
    }

    /**
     * Creates a Builder by copying an existing test_updated instance
     * @param other The existing instance to copy.
     */
    private Builder(br.com.cogna.test_updated other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dateReceived)) {
        this.dateReceived = data().deepCopy(fields()[1].schema(), other.dateReceived);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.source)) {
        this.source = data().deepCopy(fields()[2].schema(), other.source);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.testDate)) {
        this.testDate = data().deepCopy(fields()[3].schema(), other.testDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.type)) {
        this.type = data().deepCopy(fields()[4].schema(), other.type);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.contact)) {
        this.contact = data().deepCopy(fields()[5].schema(), other.contact);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.code)) {
        this.code = data().deepCopy(fields()[6].schema(), other.code);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.year)) {
        this.year = data().deepCopy(fields()[7].schema(), other.year);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.recordActive)) {
        this.recordActive = data().deepCopy(fields()[8].schema(), other.recordActive);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[9].schema(), other.updatedAt);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.userUpdated)) {
        this.userUpdated = data().deepCopy(fields()[10].schema(), other.userUpdated);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public br.com.cogna.test_updated.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public br.com.cogna.test_updated.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'dateReceived' field.
      * @return The value.
      */
    public java.time.LocalDate getDateReceived() {
      return dateReceived;
    }


    /**
      * Sets the value of the 'dateReceived' field.
      * @param value The value of 'dateReceived'.
      * @return This builder.
      */
    public br.com.cogna.test_updated.Builder setDateReceived(java.time.LocalDate value) {
      validate(fields()[1], value);
      this.dateReceived = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'dateReceived' field has been set.
      * @return True if the 'dateReceived' field has been set, false otherwise.
      */
    public boolean hasDateReceived() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'dateReceived' field.
      * @return This builder.
      */
    public br.com.cogna.test_updated.Builder clearDateReceived() {
      dateReceived = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * @return The value.
      */
    public java.lang.CharSequence getSource() {
      return source;
    }


    /**
      * Sets the value of the 'source' field.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public br.com.cogna.test_updated.Builder setSource(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.source = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'source' field.
      * @return This builder.
      */
    public br.com.cogna.test_updated.Builder clearSource() {
      source = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'testDate' field.
      * @return The value.
      */
    public java.time.LocalDate getTestDate() {
      return testDate;
    }


    /**
      * Sets the value of the 'testDate' field.
      * @param value The value of 'testDate'.
      * @return This builder.
      */
    public br.com.cogna.test_updated.Builder setTestDate(java.time.LocalDate value) {
      validate(fields()[3], value);
      this.testDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'testDate' field has been set.
      * @return True if the 'testDate' field has been set, false otherwise.
      */
    public boolean hasTestDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'testDate' field.
      * @return This builder.
      */
    public br.com.cogna.test_updated.Builder clearTestDate() {
      testDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public br.com.cogna.test_updated.Builder setType(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.type = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public br.com.cogna.test_updated.Builder clearType() {
      type = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'contact' field.
      * @return The value.
      */
    public java.lang.CharSequence getContact() {
      return contact;
    }


    /**
      * Sets the value of the 'contact' field.
      * @param value The value of 'contact'.
      * @return This builder.
      */
    public br.com.cogna.test_updated.Builder setContact(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.contact = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'contact' field has been set.
      * @return True if the 'contact' field has been set, false otherwise.
      */
    public boolean hasContact() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'contact' field.
      * @return This builder.
      */
    public br.com.cogna.test_updated.Builder clearContact() {
      contact = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'code' field.
      * @return The value.
      */
    public java.lang.CharSequence getCode() {
      return code;
    }


    /**
      * Sets the value of the 'code' field.
      * @param value The value of 'code'.
      * @return This builder.
      */
    public br.com.cogna.test_updated.Builder setCode(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.code = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'code' field.
      * @return This builder.
      */
    public br.com.cogna.test_updated.Builder clearCode() {
      code = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'year' field.
      * @return The value.
      */
    public java.lang.Integer getYear() {
      return year;
    }


    /**
      * Sets the value of the 'year' field.
      * @param value The value of 'year'.
      * @return This builder.
      */
    public br.com.cogna.test_updated.Builder setYear(java.lang.Integer value) {
      validate(fields()[7], value);
      this.year = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'year' field has been set.
      * @return True if the 'year' field has been set, false otherwise.
      */
    public boolean hasYear() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'year' field.
      * @return This builder.
      */
    public br.com.cogna.test_updated.Builder clearYear() {
      year = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'recordActive' field.
      * @return The value.
      */
    public boolean getRecordActive() {
      return recordActive;
    }


    /**
      * Sets the value of the 'recordActive' field.
      * @param value The value of 'recordActive'.
      * @return This builder.
      */
    public br.com.cogna.test_updated.Builder setRecordActive(boolean value) {
      validate(fields()[8], value);
      this.recordActive = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'recordActive' field has been set.
      * @return True if the 'recordActive' field has been set, false otherwise.
      */
    public boolean hasRecordActive() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'recordActive' field.
      * @return This builder.
      */
    public br.com.cogna.test_updated.Builder clearRecordActive() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'updatedAt' field.
      * @return The value.
      */
    public java.lang.Object getUpdatedAt() {
      return updatedAt;
    }


    /**
      * Sets the value of the 'updatedAt' field.
      * @param value The value of 'updatedAt'.
      * @return This builder.
      */
    public br.com.cogna.test_updated.Builder setUpdatedAt(java.lang.Object value) {
      validate(fields()[9], value);
      this.updatedAt = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'updatedAt' field has been set.
      * @return True if the 'updatedAt' field has been set, false otherwise.
      */
    public boolean hasUpdatedAt() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'updatedAt' field.
      * @return This builder.
      */
    public br.com.cogna.test_updated.Builder clearUpdatedAt() {
      updatedAt = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'userUpdated' field.
      * @return The value.
      */
    public java.lang.CharSequence getUserUpdated() {
      return userUpdated;
    }


    /**
      * Sets the value of the 'userUpdated' field.
      * @param value The value of 'userUpdated'.
      * @return This builder.
      */
    public br.com.cogna.test_updated.Builder setUserUpdated(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.userUpdated = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'userUpdated' field has been set.
      * @return True if the 'userUpdated' field has been set, false otherwise.
      */
    public boolean hasUserUpdated() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'userUpdated' field.
      * @return This builder.
      */
    public br.com.cogna.test_updated.Builder clearUserUpdated() {
      userUpdated = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public test_updated build() {
      try {
        test_updated record = new test_updated();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.dateReceived = fieldSetFlags()[1] ? this.dateReceived : (java.time.LocalDate) defaultValue(fields()[1]);
        record.source = fieldSetFlags()[2] ? this.source : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.testDate = fieldSetFlags()[3] ? this.testDate : (java.time.LocalDate) defaultValue(fields()[3]);
        record.type = fieldSetFlags()[4] ? this.type : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.contact = fieldSetFlags()[5] ? this.contact : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.code = fieldSetFlags()[6] ? this.code : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.year = fieldSetFlags()[7] ? this.year : (java.lang.Integer) defaultValue(fields()[7]);
        record.recordActive = fieldSetFlags()[8] ? this.recordActive : (java.lang.Boolean) defaultValue(fields()[8]);
        record.updatedAt = fieldSetFlags()[9] ? this.updatedAt :  defaultValue(fields()[9]);
        record.userUpdated = fieldSetFlags()[10] ? this.userUpdated : (java.lang.CharSequence) defaultValue(fields()[10]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<test_updated>
    WRITER$ = (org.apache.avro.io.DatumWriter<test_updated>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<test_updated>
    READER$ = (org.apache.avro.io.DatumReader<test_updated>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










